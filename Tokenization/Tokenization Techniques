{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "##  Step 1: Basic Tokenization (Custom Implementation)\n"
      ],
      "metadata": {
        "id": "qRGxjuFz_etk"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_ojlr07A-eh0",
        "outputId": "849df09e-fecc-4c9f-fa90-158e4c1d7e2e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Whitespace Tokens:\n",
            "['Tokenization', 'is', 'the', 'first', 'step', 'in', 'NLP.', 'It', 'involves', 'splitting', 'text', 'into', 'meaningful', 'units.']\n",
            "\n",
            " Regex-based Tokens:\n",
            "['Tokenization', 'is', 'the', 'first', 'step', 'in', 'NLP', 'It', 'involves', 'splitting', 'text', 'into', 'meaningful', 'units', '']\n"
          ]
        }
      ],
      "source": [
        "import re\n",
        "\n",
        "text = \"Tokenization is the first step in NLP. It involves splitting text into meaningful units.\"\n",
        "\n",
        "# a) Whitespace-based tokenization\n",
        "def whitespace_tokenizer(text):\n",
        "    return text.split()\n",
        "\n",
        "# b) Regex-based tokenization (removes punctuation)\n",
        "def regex_tokenizer(text):\n",
        "    return re.split(r'\\W+', text)\n",
        "\n",
        "print(\" Whitespace Tokens:\")\n",
        "print(whitespace_tokenizer(text))\n",
        "\n",
        "print(\"\\n Regex-based Tokens:\")\n",
        "print(regex_tokenizer(text))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##  Step 2: Tokenization using NLTK"
      ],
      "metadata": {
        "id": "pUvdLmEC_iuE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import nltk\n",
        "nltk.download('punkt')\n",
        "nltk.download('punkt_tab')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nyf5WPzJ-jLr",
        "outputId": "c8a1b729-794f-471b-8ead-fccd08d799dd"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]   Package punkt_tab is already up-to-date!\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from nltk.tokenize import word_tokenize, sent_tokenize\n",
        "\n",
        "print(\"\\n NLTK Word Tokenizer:\")\n",
        "print(word_tokenize(text))\n",
        "\n",
        "print(\"\\n NLTK Sentence Tokenizer:\")\n",
        "print(sent_tokenize(text))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Knppr3xK_pBY",
        "outputId": "a9ef1b8e-f248-47b5-eb7e-eeb100ca99cf"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " NLTK Word Tokenizer:\n",
            "['Tokenization', 'is', 'the', 'first', 'step', 'in', 'NLP', '.', 'It', 'involves', 'splitting', 'text', 'into', 'meaningful', 'units', '.']\n",
            "\n",
            " NLTK Sentence Tokenizer:\n",
            "['Tokenization is the first step in NLP.', 'It involves splitting text into meaningful units.']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 3: Tokenization with spaCy"
      ],
      "metadata": {
        "id": "gH39Pzq-_xeR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -q spacy\n",
        "!python -m spacy download en_core_web_sm\n",
        "\n",
        "import spacy\n",
        "nlp = spacy.load(\"en_core_web_sm\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d_MpSjGs_K2C",
        "outputId": "b018b2c3-4715-401b-82d1-b68f16dc09e5"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting en-core-web-sm==3.8.0\n",
            "  Using cached https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.8.0/en_core_web_sm-3.8.0-py3-none-any.whl (12.8 MB)\n",
            "\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n",
            "You can now load the package via spacy.load('en_core_web_sm')\n",
            "\u001b[38;5;3m⚠ Restart to reload dependencies\u001b[0m\n",
            "If you are in a Jupyter or Colab notebook, you may need to restart Python in\n",
            "order to load all the package's dependencies. You can do this by selecting the\n",
            "'Restart kernel' or 'Restart runtime' option.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "doc = nlp(text)\n",
        "print(\"\\n spaCy Tokens:\")\n",
        "print([token.text for token in doc])\n",
        "\n",
        "# Normalize case and remove punctuation\n",
        "print(\"\\n Normalized Tokens (lowercased, no punctuation):\")\n",
        "print([token.text.lower() for token in doc if not token.is_punct])\n",
        "\n",
        "# Remove stopwords\n",
        "print(\"\\n Tokens without Stopwords:\")\n",
        "print([token.text.lower() for token in doc if not token.is_punct and not token.is_stop])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UyryPoLQ_tgC",
        "outputId": "7b2d20b9-ac39-4c23-b3dc-388b4eb1bdfa"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " spaCy Tokens:\n",
            "['Tokenization', 'is', 'the', 'first', 'step', 'in', 'NLP', '.', 'It', 'involves', 'splitting', 'text', 'into', 'meaningful', 'units', '.']\n",
            "\n",
            " Normalized Tokens (lowercased, no punctuation):\n",
            "['tokenization', 'is', 'the', 'first', 'step', 'in', 'nlp', 'it', 'involves', 'splitting', 'text', 'into', 'meaningful', 'units']\n",
            "\n",
            " Tokens without Stopwords:\n",
            "['tokenization', 'step', 'nlp', 'involves', 'splitting', 'text', 'meaningful', 'units']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Step 4: Subword Tokenization (BPE - Byte Pair Encoding)"
      ],
      "metadata": {
        "id": "d4VYBDk8_2P4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -q transformers sentencepiece"
      ],
      "metadata": {
        "id": "pgsthotk_S26"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import AutoTokenizer\n",
        "\n",
        "bert_tokenizer = AutoTokenizer.from_pretrained(\"bert-base-uncased\")\n",
        "bpe_tokens = bert_tokenizer.tokenize(\"Tokenization is an essential part of NLP.\")\n",
        "print(\"\\n BERT (Subword) Tokens:\")\n",
        "print(bpe_tokens)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SlA-2_mO_aDk",
        "outputId": "0ee2eaa1-eea7-49ae-98ea-b801546bb9ad"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " BERT (Subword) Tokens:\n",
            "['token', '##ization', 'is', 'an', 'essential', 'part', 'of', 'nl', '##p', '.']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visualization of Tokenization"
      ],
      "metadata": {
        "id": "E6YwIm1oAgBX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Prepare all tokens\n",
        "ws_tokens = whitespace_tokenizer(text)\n",
        "regex_tokens = regex_tokenizer(text)\n",
        "nltk_tokens = word_tokenize(text)\n",
        "spacy_tokens = [token.text for token in nlp(text)]\n",
        "bert_tokens = bert_tokenizer.tokenize(text)\n",
        "\n",
        "# Token counts\n",
        "token_counts = {\n",
        "    \"Whitespace\": len(ws_tokens),\n",
        "    \"Regex\": len(regex_tokens),\n",
        "    \"NLTK\": len(nltk_tokens),\n",
        "    \"spaCy\": len(spacy_tokens),\n",
        "    \"BERT (BPE)\": len(bert_tokens)\n",
        "}\n",
        "\n",
        "# Plot\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.bar(token_counts.keys(), token_counts.values(), color='skyblue')\n",
        "plt.title(\"Number of Tokens by Tokenizer\")\n",
        "plt.ylabel(\"Token Count\")\n",
        "plt.xlabel(\"Tokenizer\")\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.6)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 413
        },
        "id": "x-zIklyd_75s",
        "outputId": "ad80a426-16f8-4063-ad17-689235151bb8"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Benchmark Tokenization Speed"
      ],
      "metadata": {
        "id": "DijiGqNIAciU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import timeit\n",
        "\n",
        "# Wrap into timing functions\n",
        "def time_tokenizer(func, n=1000):\n",
        "    return timeit.timeit(func, number=n)\n",
        "\n",
        "print(\"\\n Benchmarking tokenization speed (avg over 1000 runs)...\")\n",
        "\n",
        "timings = {\n",
        "    \"Whitespace\": time_tokenizer(lambda: whitespace_tokenizer(text)),\n",
        "    \"Regex\": time_tokenizer(lambda: regex_tokenizer(text)),\n",
        "    \"NLTK\": time_tokenizer(lambda: word_tokenize(text)),\n",
        "    \"spaCy\": time_tokenizer(lambda: [token.text for token in nlp(text)]),\n",
        "    \"BERT (HF)\": time_tokenizer(lambda: bert_tokenizer.tokenize(text))\n",
        "}\n",
        "\n",
        "# Plot benchmark\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.bar(timings.keys(), timings.values(), color='coral')\n",
        "plt.title(\"Tokenization Speed (Lower is Better)\")\n",
        "plt.ylabel(\"Time (seconds for 1000 runs)\")\n",
        "plt.xlabel(\"Tokenizer\")\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.6)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "rrG2hw-aAGcM",
        "outputId": "504f4721-99cf-4db7-8b34-6ba6902097b4"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Benchmarking tokenization speed (avg over 1000 runs)...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
